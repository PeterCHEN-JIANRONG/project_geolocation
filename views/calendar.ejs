<!DOCTYPE html>
<html>
  <head>
    <title>Google Calendar API Quickstart</title>
    <style>
        #map {
          height: 100%;
        }
        html,body {
          height: 100%;
          margin: 0;
          padding: 0;
        }
      </style>
    <meta charset='utf-8' />
    <script src="https://apis.google.com/js/platform.js" async defer></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <meta name="google-signin-client_id" content="506634394743-lfkonje6ojpeqjpfin97v5umupjon3ed.apps.googleusercontent.com">
  </head>
  <body>
    <p>Google Calendar API Quickstart</p>
    <div id="authorize-button" style="display: none"></div>
    <script>
      // function onSuccess(googleUser) {
      //   console.log('Logged in as: ' + googleUser.getBasicProfile().getName());
      // }
      // function onFailure(error) {
      //   console.log(error);
      // }
      function renderButton() {
        gapi.signin2.render('authorize-button', {
          'scope': 'profile email',
          'width': 240,
          'height': 50,
          'longtitle': false,
          'theme': 'dark',
          // 'onsuccess': onSuccess,
          // 'onfailure': onFailure
        });
      }
    </script>
    <!--Add buttons to initiate auth sequence and sign out-->
    <button id="signout-button" style="display: none;">Sign Out</button>
    <!-- <pre id="content"></pre> -->
    </br></br>

    <p id="myEvent" ></p>
    <button onclick="showMap()">ShowMap</button>
    <div id="map"></div>

    <script type="text/javascript">
      var curpos;
      var map;
      var markers = [];
      var myMarker = [];
      var temp;
      var events = [];

      // Client ID and API key from the Developer Console
      var CLIENT_ID = '506634394743-lfkonje6ojpeqjpfin97v5umupjon3ed.apps.googleusercontent.com';

      // Array of API discovery doc URLs for APIs used by the quickstart
      var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];

      // Authorization scopes required by the API; multiple scopes can be
      // included, separated by spaces.
      var SCOPES = "https://www.googleapis.com/auth/calendar.readonly";

      var authorizeButton = document.getElementById('authorize-button');
      var signoutButton = document.getElementById('signout-button');

      /**
       *  On load, called to load the auth2 library and API client library.
       */
      function handleClientLoad() {
        gapi.load('client:auth2', initClient);
      }

      /**
       *  Initializes the API client library and sets up sign-in state
       *  listeners.
       */
      function initClient() {
        gapi.client.init({
          discoveryDocs: DISCOVERY_DOCS,
          clientId: CLIENT_ID,
          scope: SCOPES
        }).then(function () {
          // Listen for sign-in state changes.
          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

          // Handle the initial sign-in state.
          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
          authorizeButton.onclick = handleAuthClick;
          signoutButton.onclick = handleSignoutClick;
        });
      }

      /**
       *  Called when the signed in status changes, to update the UI
       *  appropriately. After a sign-in, the API is called.
       */
      function updateSigninStatus(isSignedIn) {
        if (isSignedIn) {
          authorizeButton.style.display = 'none';
          signoutButton.style.display = 'block';
          listUpcomingEvents();
        } else {
          authorizeButton.style.display = 'block';
          signoutButton.style.display = 'none';
        }
      }

      /**
       *  Sign in the user upon button click.
       */
      function handleAuthClick(event) {
        gapi.auth2.getAuthInstance().signIn();
      }

      /**
       *  Sign out the user upon button click.
       */
      function handleSignoutClick(event) {
        gapi.auth2.getAuthInstance().signOut();
        gapi.auth2.getAuthInstance().disconnect();
        document.location.href = "/";
      }

      /**
       * Append a pre element to the body containing the given message
       * as its text node. Used to display the results of the API call.
       *
       * @param {string} message Text to be placed in pre element.
       */
      function appendPre(message) {
        // var pre = document.getElementById('myEvent');
        // var textContent = document.createTextNode(message + '\n');
        // pre.appendChild(textContent);
        var temp = document.getElementById("myEvent").innerHTML;
        // document.getElementById("myEvent").innerHTML = "Upcoming event info:" + "<br/>" + message ;
        document.getElementById("myEvent").innerHTML = temp + "<br/>" + message ;
      }

      /**
       * Print the summary and start datetime/date of the next ten events in
       * the authorized user's calendar. If no events are found an
       * appropriate message is printed.
       */
      function listUpcomingEvents() {
        var mydata;
        gapi.client.calendar.events.list({
          'calendarId': 'primary',
          'timeMin': (new Date()).toISOString(),
          'showDeleted': false,
          'singleEvents': true,
          'maxResults': 1,
          'orderBy': 'startTime'
        }).then(function(response) {
           events = response.result.items;

          if (events.length > 0) {
            for (i = 0; i < events.length; i++) {
              var event = events[i];
              var when = event.start.dateTime;
              if (!when) {
                when = event.start.date;
              }
              temp =
                {
                'id'      :event.id,
                'summary' :event.summary,
                'location':event.location,
                'start'   :event.start,
                'end'     :event.end,
                'attendees':event.attendees
                }
              appendPre("start time : "+ "( " + when + " )")
              var temp_attendees ="";
              for(var key in event.attendees){
                temp_attendees += (' '+event.attendees[key].displayName);
              }
              appendPre("attendees :" + temp_attendees);
              appendPre("summary:" + event.summary );
              appendPre("destination:" + event.location);

              $.ajax({
                url: "/sendevent",
                type: "post",
                data:temp,
                success: function(result){
                  console.log("1 event get")
                }
              }) 
            }
          } 
          else appendPre('No upcoming events found.');
        });   
        updatecurpos();
      }

      function updatecurpos(){
        if (events.length > 0) {
          navigator.geolocation.getCurrentPosition(function (position) {
          curpos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };          
          var obj = {
            "position" : {
              lat:curpos.lat,
              lng:curpos.lng
            },
            "id":temp.id,
            "attendees":temp.attendees
          }
          console.log(curpos);
            $.post("/sendposition",obj,function(data, status){
              console.log("current success");
            })
          })
        }
      }
      setInterval(updatecurpos,5000)
      var despos={lat:0,lng:0}
      function showMap(){
        if (events.length > 0) {
          $.ajax({
            url: "/getDestination",
            type: "post",
            data:{"location":temp.location},
            success: function(result){
              // console.log(result)
              despos.lat=result.position.lat
              despos.lng=result.position.lng
              var script = document.createElement('script');
              script.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyBtLdMhgwM1UN5bRNt7OT1y5rvUQmhpbPM&callback=initMap';
              var body = document.getElementsByTagName("body")[0];
              body.appendChild(script);
            }
          })
        }
        else appendPre("No friends' location infromation");
      }

      function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
          // center: { lat: 24.978265, lng: 121.550483 },
          zoom: 16
        });
        var image = 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png'
        var image2 = 'https://maps.google.com/mapfiles/ms/icons/green-dot.png'
        
        var destination = new google.maps.Marker({
          position: despos,
          map: map,
          icon:image2,
          label:"目的地",
          opacity: 0.5
        })
        map.setCenter(despos);
          for (var i = 0; i < myMarker.length; i++) {
            myMarker[i].setMap(null);
          }
          myMarker = [];
          var marker = new google.maps.Marker({
            position: curpos,
            map: map,
            icon:image,
            label:"我"
          })
          myMarker.push(marker);
        addPoint();
        
      }

      function addPoint(){
          $.ajax({
            url: "/getdata",
            type: "post",
            data:{"event_id":temp.id,
                  "attendees":temp.attendees},
            success: function(result){
              for(var i = 0; i < markers.length; i++) {
                markers[i].setMap(null);
              }
              markers = [];
              for(let i = 0;i < result.length;i++){
                var marker = new google.maps.Marker({
                  position: {lat: Number(result[i].position.lat),lng: Number(result[i].position.lng)},
                  label: result[i].displayname,
                  map: map
                })
                markers.push(marker);
              }        
              console.log("add marker success");
            }
          })
        }

    </script>

    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <script src="https://apis.google.com/js/platform.js?onload=renderButton" async defer></script>
  </body>
</html>